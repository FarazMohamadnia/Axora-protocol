{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-299c3ccdd3bb4f1c30d234075ba177e2d9072ec0",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Token/token.sol": "project/contracts/Token/token.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Token/token.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SuperToken - ERC20 Token Contract\n * @dev A secure, pausable ERC20 token with mint/burn functionality\n * @notice Implements the standard ERC20 interface with additional security features\n * @notice Includes reentrancy protection, pausability, and emergency functions\n */\ncontract Token is IERC20, ReentrancyGuard, Pausable, Ownable {\n    // Token metadata\n    string public _name;           // Token name (e.g., \"SuperToken\")\n    string public _symbol;         // Token symbol (e.g., \"SUPER\")\n    uint8 public _decimals;        // Token decimal places (typically 18)\n    uint256 public _totalSupply;   // Total circulating supply\n\n    // Token balances and allowances\n    mapping(address => uint256) public _balanceOf;                                    // User balances\n    mapping(address => mapping(address => uint256)) public _allowance;                 // Spending allowances\n\n    // Note: Transfer and Approval events are already defined in IERC20 interface\n    // so we don't need to declare them again\n\n    /**\n     * @dev Constructor to initialize the token contract\n     * @param totalSupplyAmount Initial token supply amount\n     * @param tokenName Name of the token\n     * @param tokenSymbol Symbol of the token\n     * @param tokenDecimals Number of decimal places\n     * @notice All initial tokens are assigned to the deployer\n     */\n    constructor(uint256 totalSupplyAmount, string memory tokenName, string memory tokenSymbol, uint8 tokenDecimals) \n        Ownable(msg.sender) // Initialize Ownable with deployer as owner\n    {\n        // Calculate total supply with decimals (e.g., 1000 * 10^18 = 1000 tokens)\n        _totalSupply = totalSupplyAmount * (10 ** tokenDecimals);\n        \n        // Set token metadata\n        _name = tokenName;\n        _symbol = tokenSymbol;\n        _decimals = tokenDecimals;\n        \n        // Assign all initial tokens to the deployer\n        _balanceOf[msg.sender] = _totalSupply;\n        \n        // Emit transfer event from zero address to deployer (minting)\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    // ============ IERC20 INTERFACE FUNCTIONS ============\n    \n    /**\n     * @dev Returns the name of the token\n     * @return The token name\n     */\n    function name() public view returns (string memory) {\n        return _name;    \n    }\n\n    /**\n     * @dev Returns the symbol of the token\n     * @return The token symbol\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used for token amounts\n     * @return The number of decimals\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the total supply of tokens\n     * @return The total token supply\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev Returns the balance of tokens for a specific account\n     * @param account The address to query\n     * @return The token balance of the account\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    /**\n     * @dev Returns the amount of tokens the spender is allowed to spend on behalf of the owner\n     * @param owner The address that owns the tokens\n     * @param spender The address that can spend the tokens\n     * @return The amount of tokens the spender can spend\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    // ============ CORE TRANSFER FUNCTIONS ============\n    \n    /**\n     * @dev Transfers tokens from the caller to a specified address\n     * @param to The recipient address\n     * @param amount The amount of tokens to transfer\n     * @return True if the transfer was successful\n     * @notice Protected against reentrancy and can be paused\n     */\n    function transfer(address to, uint256 amount) public override whenNotPaused nonReentrant returns (bool) {\n        // Validate recipient address\n        require(to != address(0), \"Transfer to zero address\");\n        \n        // Validate transfer amount\n        require(amount > 0, \"Transfer amount must be greater than 0\");\n        \n        // Check sufficient balance\n        require(_balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        \n        // Update balances\n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[to] += amount;\n        \n        // Emit transfer event\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Approves a spender to spend tokens on behalf of the caller\n     * @param spender The address that can spend the tokens\n     * @param amount The amount of tokens the spender can spend\n     * @return True if the approval was successful\n     * @notice Can be paused by owner\n     */\n    function approve(address spender, uint256 amount) public override whenNotPaused returns (bool) {\n        // Validate spender address\n        require(spender != address(0), \"Approve to zero address\");\n        \n        // Validate approval amount\n        require(amount > 0, \"Approve amount must be greater than 0\");\n        \n        // Set allowance\n        _allowance[msg.sender][spender] = amount;\n        \n        // Emit approval event\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfers tokens from one address to another using allowance\n     * @param from The address to transfer tokens from\n     * @param to The address to transfer tokens to\n     * @param amount The amount of tokens to transfer\n     * @return True if the transfer was successful\n     * @notice Protected against reentrancy and can be paused\n     */\n    function transferFrom(address from, address to, uint256 amount) public override whenNotPaused nonReentrant returns (bool) {\n        // Validate addresses\n        require(from != address(0), \"Transfer from zero address\");\n        require(to != address(0), \"Transfer to zero address\");\n        \n        // Validate transfer amount\n        require(amount > 0, \"Transfer amount must be greater than 0\");\n        \n        // Check sufficient balance and allowance\n        require(_balanceOf[from] >= amount, \"Insufficient balance\");\n        require(_allowance[from][msg.sender] >= amount, \"Insufficient allowance\");\n        \n        // Update balances and allowance\n        _balanceOf[from] -= amount;\n        _balanceOf[to] += amount;\n        _allowance[from][msg.sender] -= amount;\n        \n        // Emit transfer event\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    // ============ MINT & BURN FUNCTIONS ============\n    \n    /**\n     * @dev Mints new tokens and assigns them to a specified address\n     * @param to The address to receive the minted tokens\n     * @param amount The amount of tokens to mint\n     * @notice Only owner can call this function\n     */\n    function mint(address to, uint256 amount) public onlyOwner whenNotPaused {\n        // Validate recipient address\n        require(to != address(0), \"Mint to zero address\");\n        \n        // Validate mint amount\n        require(amount > 0, \"Mint amount must be greater than 0\");\n        \n        // Update balances and total supply\n        _balanceOf[to] += amount;\n        _totalSupply += amount;\n        \n        // Emit transfer event from zero address (minting)\n        emit Transfer(address(0), to, amount);\n    }\n\n    /**\n     * @dev Burns tokens from the caller's balance\n     * @param amount The amount of tokens to burn\n     * @notice Protected against reentrancy and can be paused\n     */\n    function burn(uint256 amount) public whenNotPaused nonReentrant {\n        // Validate burn amount\n        require(amount > 0, \"Burn amount must be greater than 0\");\n        \n        // Check sufficient balance\n        require(_balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        \n        // Update balances and total supply\n        _balanceOf[msg.sender] -= amount;\n        _totalSupply -= amount;\n        \n        // Emit transfer event to zero address (burning)\n        emit Transfer(msg.sender, address(0), amount);\n    }\n\n    // ============ PAUSE & EMERGENCY FUNCTIONS ============\n    \n    /**\n     * @dev Pauses all token operations (transfers, approvals, minting, burning)\n     * @notice Only owner can call this function\n     * @notice This is a safety mechanism for emergency situations\n     */\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @dev Resumes all token operations after being paused\n     * @notice Only owner can call this function\n     */\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Emergency function to withdraw ERC20 tokens stuck in the contract\n     * @param token The address of the ERC20 token to withdraw\n     * @param amount The amount of tokens to withdraw\n     * @notice Only owner can call this function\n     * @notice Useful for recovering tokens sent to the contract by mistake\n     */\n    function emergencyWithdraw(address token, uint256 amount) public onlyOwner {\n        // Validate token address\n        require(token != address(0), \"Invalid token address\");\n        \n        // Validate amount\n        require(amount > 0, \"Amount must be greater than 0\");\n        \n        // Transfer tokens to owner\n        IERC20(token).transfer(owner(), amount);\n    }\n\n    /**\n     * @dev Emergency function to withdraw ETH stuck in the contract\n     * @notice Only owner can call this function\n     * @notice Useful for recovering ETH sent to the contract by mistake\n     */\n    function emergencyWithdrawETH() public onlyOwner {\n        // Get current ETH balance\n        uint256 balance = address(this).balance;\n        require(balance > 0, \"No ETH to withdraw\");\n        \n        // Transfer ETH to owner\n        (bool success, ) = owner().call{value: balance}(\"\");\n        require(success, \"ETH transfer failed\");\n    }\n\n    // ============ TESTING & UTILITY FUNCTIONS ============\n    \n    /**\n     * @dev Utility function for testing purposes\n     * @return The address of the message sender\n     * @notice This function is only used for testing and debugging\n     */\n    function getSender() public view returns (address) {\n        return msg.sender;\n    }\n}"
      }
    }
  }
}