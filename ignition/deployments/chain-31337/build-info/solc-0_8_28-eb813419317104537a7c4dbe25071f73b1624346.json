{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-eb813419317104537a7c4dbe25071f73b1624346",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Airdrop/airdrop.sol": "project/contracts/Airdrop/airdrop.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/Airdrop/airdrop.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n\ncontract Airdrop {\n    address public immutable owner;\n    uint256 public immutable airdropAmount;\n    uint256 public immutable startTime;\n    uint256 public immutable endTime;\n    uint256 public totalAmount;\n    IERC20 public immutable tokenAddress;\n    \n\n\n    struct User{\n        uint256 amount;\n        bool isClaimed;\n        address user;\n    }\n\n    User[] public userList;\n\n    mapping(address => User) private users;\n    mapping(address => uint256) private userIndex;\n\n    event Airdropped(address indexed user, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can call this function\");\n        _;\n    }\n\n    modifier sufficientTokenBalance() {\n        require(tokenAddress.balanceOf(address(this)) > 0, \"Insufficient token balance\");\n        _;\n    }\n\n    modifier endAirdrop() {\n        require(totalAmount == 0, \"Airdrop has ended\");\n        _;\n    }\n\n    modifier onlyUser() {\n        require(users[msg.sender].user == msg.sender, \"You are not a user\");\n        require(!users[msg.sender].isClaimed, \"You have already claimed\");\n        _;\n    }\n\n    modifier airdropActive() {\n        require(block.timestamp >= startTime, \"Airdrop has not started yet\");\n        require(block.timestamp <= endTime, \"Airdrop has ended\");\n        _;\n    }\n\n    modifier airdropNotStarted() {\n        require(endTime > startTime, \"Airdrop has already started\");\n        _;\n    }\n\n    constructor(\n        address _owner, \n        address _tokenAddress, \n        uint256 _totalAmount, \n        uint256 _airdropAmount, \n        uint256 _endTime\n    ) {\n        require(_endTime > block.timestamp, \"End time must be after start time\");\n        require(_totalAmount > 0, \"Total amount must be greater than 0\");\n        require(_airdropAmount > 0, \"Airdrop amount must be greater than 0\");\n        require(_tokenAddress != address(0), \"Invalid token address\");\n        \n        startTime = block.timestamp;\n        owner = _owner;\n        tokenAddress = IERC20(_tokenAddress);\n        totalAmount = _totalAmount;\n        airdropAmount = _airdropAmount;\n        endTime = _endTime;\n \n    }\n\n    // Add user to airdrop\n    function addUser(address _user) external onlyOwner airdropNotStarted {\n        require(users[_user].amount == 0, \"User already exists\");\n        require(users[_user].isClaimed == false, \"User is already claimed\");\n\n        totalAmount -= airdropAmount;\n        userIndex[_user] = userList.length;\n        users[_user] = User(airdropAmount, false, _user);\n        userList.push(User(airdropAmount, false, _user));\n    }\n\n\n\n    // Get Airdrop\n    function airdrop() external onlyUser airdropActive sufficientTokenBalance {\n        users[msg.sender] = User(airdropAmount, true, msg.sender);\n        require(\n            tokenAddress.transfer(msg.sender, airdropAmount),\n            \"Token transfer failed\"\n        );\n        emit Airdropped(msg.sender, airdropAmount);\n    }\n\n\n    // delete user\n    function deleteUser(address _user) external onlyOwner {\n        require(users[_user].user == _user, \"User not found\");\n        require(users[_user].isClaimed == false, \"User has already claimed\"); \n\n       \n        uint256 index = userIndex[_user];\n        require(index < userList.length, \"Invalid user index\");\n        require(userList[index].user == _user, \"User index mismatch\");\n\n       \n        if (index < userList.length - 1) {\n            userList[index] = userList[userList.length - 1];\n            userIndex[userList[index].user] = index; \n        }\n\n        userList.pop();\n        delete userIndex[_user]; \n        delete users[_user];\n        totalAmount += airdropAmount; \n\n    }\n\n\n    // Get user details\n    function getUser(address _user) external view onlyOwner returns (User memory) {\n        return users[_user];\n    }\n\n    // Get user list\n    function getUserList() external view onlyOwner returns (User[] memory) {\n        return userList;\n    }\n\n    // Check if airdrop is currently active\n    function isAirdropActive() external view returns (bool) {\n        return block.timestamp >= startTime && block.timestamp <= endTime;\n    }\n\n    // Get remaining time until airdrop starts\n    function getTimeUntilStart() external view returns (uint256) {\n        if (block.timestamp >= startTime) return 0;\n        return startTime - block.timestamp;\n    }\n\n    // Get remaining time until airdrop ends\n    function getTimeUntilEnd() external view returns (uint256) {\n        if (block.timestamp >= endTime) return 0;\n        return endTime - block.timestamp;\n    }\n\n    // Get current airdrop status\n    function getAirdropStatus() external view returns (\n        bool _isActive,\n        bool _hasStarted,\n        bool _hasEnded,\n        uint256 _currentTime,\n        uint256 _timeUntilStart,\n        uint256 _timeUntilEnd\n    ) {\n        bool hasStarted = block.timestamp >= startTime;\n        bool hasEnded = block.timestamp >= endTime;\n        bool isActive = hasStarted && !hasEnded;\n        \n        return (\n            isActive,\n            hasStarted,\n            hasEnded,\n            block.timestamp,\n            hasStarted ? 0 : startTime - block.timestamp,\n            hasEnded ? 0 : endTime - block.timestamp\n        );\n    }\n}"
      }
    }
  }
}